---
title: "Simulation Challenge"
subtitle: "Generative Models and Monte Carlo Simulation"
format:
  html: default
  pdf: default
execute:
  echo: false
  eval: true
  include: true
---

# 🎲 Simulation Challenge - Monte Carlo Analysis

## Challenge Overview

**Your Mission:** Create a comprehensive Quarto document that simulates one or two investment strategies, analy zes the results, and demonstrates your ability to present counter-intuitive findings compellingly. Then render the document to HTML and deploy it via GitHub Pages from a new repository called "simulationChallenge."



## Expected Value Analysis Answers 📊

Let's work through the expected value analysis questions step by step:

### Question 1: Expected Value After One Coin Flip

For the original game, after one coin flip:
- **Heads (50% probability):** Account becomes $1,000 × 1.5 = $1,500
- **Tails (50% probability):** Account becomes $1,000 × 0.6 = $600

**Expected Value = 0.5 × $1,500 + 0.5 × $600 = $750 + $300 = $1,050**

### Question 2: Expectation vs. Reality

The expected value is **positive** ($1,050 > $1,000), which suggests the game should be profitable on average. However, this is misleading because:

- The expected value calculation assumes you can play the game many times
- In reality, you only get to play once (until age 55)
- The multiplicative nature of the game creates extreme outcomes over time

### Question 3: Single Simulation Analysis

A single simulation would show one possible path of your account balance over time. You might see:
- **Lucky path:** Consistent heads leading to exponential growth
- **Unlucky path:** Consistent tails leading to rapid decline
- **Mixed path:** Alternating results with volatile swings

**Are you happy?** Probably not, because the single path is highly unpredictable and could end up much lower than $1,000.

```{r}
#| label: single-simulation-plot-r
#| fig-cap: Single simulation showing account balance over time (R)
#| echo: false
#| include: true
#| eval: true

suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))

set.seed(42)

initial_balance <- 1000
n_periods <- 35

simulate_investment_path <- function(initial, periods) {
  balance <- initial
  path <- numeric(length = periods + 1)
  path[1] <- initial
  for (i in 1:periods) {
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      balance <- balance * 1.5
    } else {
      balance <- balance * 0.6
    }
    path[i + 1] <- balance
  }
  path
}

time_series_data <- tibble(
  year = 0:n_periods,
  balance = simulate_investment_path(initial_balance, n_periods)
)

ggplot(time_series_data, aes(x = year, y = balance)) +
  geom_line(color = "darkblue", linewidth = 1) +
  geom_point(color = "darkblue", size = 1.5) +
  geom_hline(yintercept = initial_balance, linetype = "dashed", color = "red", linewidth = 0.8) +
  scale_y_log10(labels = scales::dollar_format()) +
  labs(
    title = "Single Investment Simulation Path",
    subtitle = "Account Balance Over Time (Ages 20 to 55)",
    x = "Years",
    y = "Account Balance ($)"
  ) +
  theme_minimal(base_size = 12) +
  theme(plot.title = element_text(face = "bold"))

tail_value <- tail(time_series_data$balance, 1)
cat(sprintf("Final balance: $%s\n", scales::comma(round(tail_value, 2))))
cat(sprintf("Return: %.1f%%\n", (tail_value / initial_balance - 1) * 100))
```

### Question 4: Multiple Simulations (100 runs)

With 100 simulations, you'd see a distribution of final account balances at age 55. The results would likely show:
- **Most outcomes:** Very low balances (close to $0)
- **Few outcomes:** Extremely high balances (millions)
- **Average:** Still around $1,050, but this is misleading

**Are you happy?** Probably not, because most people would end up with very little money.

```{r}
#| label: multiple-simulations-plot-r
#| fig-cap: Distribution of final account balances from 100 simulations (R)
#| echo: false
#| include: true
#| eval: true

suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))

set.seed(123)

initial_balance <- 1000
n_periods <- 35
n_sims <- 100

simulate_final_balance <- function(initial, periods) {
  balance <- initial
  for (i in 1:periods) {
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      balance <- balance * 1.5
    } else {
      balance <- balance * 0.6
    }
  }
  balance
}

final_balances <- replicate(n_sims, simulate_final_balance(initial_balance, n_periods))

distribution_data <- tibble(
  sim_num = 1:n_sims,
  final_balance = final_balances
)

ggplot(distribution_data, aes(x = final_balance)) +
  geom_histogram(bins = 30, fill = "steelblue", alpha = 0.75, color = "black") +
  geom_vline(xintercept = initial_balance, color = "red", linetype = "dashed", linewidth = 0.9) +
  geom_vline(xintercept = mean(distribution_data$final_balance), color = "orange", linewidth = 0.9) +
  scale_x_log10(labels = scales::dollar_format()) +
  labs(
    title = "Distribution of Final Account Balances",
    subtitle = "100 Simulations, 35 Years Each",
    x = "Final Balance ($)",
    y = "Frequency"
  ) +
  theme_minimal(base_size = 12) +
  theme(plot.title = element_text(face = "bold"))

mean_balance <- mean(distribution_data$final_balance)
median_balance <- median(distribution_data$final_balance)
prob_above_initial <- mean(distribution_data$final_balance > initial_balance)
prob_above_10000 <- mean(distribution_data$final_balance > 10000)

cat(sprintf("Mean final balance: $%s\n", scales::comma(round(mean_balance, 2))))
cat(sprintf("Median final balance: $%s\n", scales::comma(round(median_balance, 2))))
cat(sprintf("Probability above $1,000: %.1f%%\n", prob_above_initial * 100))
cat(sprintf("Probability above $10,000: %.1f%%\n", prob_above_10000 * 100))
```

### Question 5: Probability Analysis

Based on 100 simulations, the probability that your account balance will be greater than $1,000 at age 55 is likely around **20-30%**. This means you have a 70-80% chance of ending up with less than your initial $1,000.

### Question 6: Strategy Comparison

For the modified strategy (betting 50% of account each time):
- The probability of ending up with more than $10,000 at age 55 would be even **lower** than the original game
- This is because the modified strategy is more conservative (smaller bets) but still has the same unfavorable expected value per bet
- The original game's higher volatility actually gives you a better chance of extreme outcomes (both positive and negative)

```{r}
#| label: strategy-comparison-plot-r
#| fig-cap: Comparison of original vs modified strategies (R)
#| echo: false
#| include: true
#| eval: true

suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))

set.seed(456)

initial_balance <- 1000
n_periods <- 35
n_sims <- 100

# Original strategy: bet entire account
simulate_original_strategy <- function(initial, periods) {
  balance <- initial
  for (i in 1:periods) {
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      balance <- balance * 1.5
    } else {
      balance <- balance * 0.6
    }
  }
  balance
}

# Modified strategy: bet 50% of account each time
simulate_modified_strategy <- function(initial, periods) {
  balance <- initial
  for (i in 1:periods) {
    coin_flip <- rbinom(1, 1, 0.5)
    bet_amount <- balance * 0.5
    if (coin_flip == 1) {
      balance <- balance - bet_amount + (bet_amount * 1.5)
    } else {
      balance <- balance - bet_amount + (bet_amount * 0.6)
    }
  }
  balance
}

original_balances <- replicate(n_sims, simulate_original_strategy(initial_balance, n_periods))
modified_balances <- replicate(n_sims, simulate_modified_strategy(initial_balance, n_periods))

comparison_df <- tibble(
  strategy = rep(c("Original", "Modified"), each = n_sims),
  final_balance = c(original_balances, modified_balances)
)

library(scales)

ggplot(comparison_df, aes(x = final_balance)) +
  geom_histogram(bins = 30, fill = "steelblue", alpha = 0.7, color = "black") +
  geom_vline(xintercept = 1000, color = "red", linetype = "dashed", linewidth = 0.9) +
  geom_vline(xintercept = 10000, color = "darkgreen", linetype = "dotted", linewidth = 0.9) +
  scale_x_log10(labels = dollar_format()) +
  labs(
    title = "Strategy Comparison: Final Account Balances",
    subtitle = "100 Simulations Each, 35 Years",
    x = "Final Balance ($)",
    y = "Frequency"
  ) +
  facet_wrap(~ strategy, nrow = 1, scales = "free_y") +
  theme_minimal(base_size = 12) +
  theme(plot.title = element_text(face = "bold"))

orig_prob_above_1000 <- mean(original_balances > 1000)
orig_prob_above_10000 <- mean(original_balances > 10000)
mod_prob_above_1000 <- mean(modified_balances > 1000)
mod_prob_above_10000 <- mean(modified_balances > 10000)

cat("=== STRATEGY COMPARISON RESULTS (R) ===\n")
cat(sprintf("Original Strategy: P(> $1,000) = %.1f%%, P(> $10,000) = %.1f%%\n",
            orig_prob_above_1000 * 100, orig_prob_above_10000 * 100))
cat(sprintf("Modified Strategy: P(> $1,000) = %.1f%%, P(> $10,000) = %.1f%%\n",
            mod_prob_above_1000 * 100, mod_prob_above_10000 * 100))
```

## Key Insight: The Ergodicity Problem

This demonstrates the **ergodicity problem** in economics:
- **Expected value** suggests the game is profitable
- **Reality** shows most people lose money
- The difference comes from the multiplicative (not additive) nature of the game over time

### Resources

- **Quarto Markdown:** [quarto.org/docs/authoring/markdown-basics.html](https://quarto.org/docs/authoring/markdown-basics.html)
- **Quarto Documentation:** [quarto.org/docs](https://quarto.org/docs)
- **R for Data Science:** [r4ds.had.co.nz](https://r4ds.had.co.nz)
- **Python Data Science Handbook:** [jakevdp.github.io/PythonDataScienceHandbook](https://jakevdp.github.io/PythonDataScienceHandbook)

### Getting Started Tips

::: {.callout-note}
## 🎯 Navy SEALs Motto

> "Slow is Smooth and Smooth is Fast"

*Take your time to understand the simulation mechanics, plan your approach carefully, and execute with precision. Rushing through this challenge will only lead to errors and confusion.*
:::

- **Browse [Essential Simulation Concepts](@sec-simulation-concepts):** This section will give you a good understanding of the concepts you need to know to complete the challenge.
- **Start Simple:** Begin with a single simulation to understand the mechanics
- **Document Everything:** Explain your reasoning and interpret your results
- **Forgetting to Set Seeds:** Always set random seeds for reproducible results
- **Total time to complete:** ~3-4 hours for the 100% grade ⏱️
- **Good luck, and remember simulation will steer you right even when intuition will steer you wrong!** 🎲

::: {.callout-warning}
## 💾 Important: Save Your Work Frequently!

**Before you start coding:** Make sure to commit your work often using the Source Control panel in Cursor (Ctrl+Shift+G or Cmd+Shift+G). This prevents the AI from overwriting your progress and ensures you don't lose your work.

**Commit after each major step:**

- After completing each simulation example
- After finishing each challenge question
- Before asking the AI for help with new code

**How to commit:**

1. Open Source Control panel (Ctrl+Shift+G)
2. Stage your changes (+ button)
3. Write a descriptive commit message
4. Click the checkmark to commit

*Remember: Frequent commits are your safety net!*
:::


## Essential Simulation Concepts 🎯 {#sec-simulation-concepts}

Before diving into the challenge, let's review the key simulation concepts you'll need. These examples will prepare you for the investment game analysis.
